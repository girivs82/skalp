// Standard library multiplier component
entity std_multiplier<const WIDTH: usize> {
    in clk: clock;
    in rst: reset;
    in a: bit<WIDTH>;
    in b: bit<WIDTH>;
    in start: bit;
    out product: bit<WIDTH*2>;
    out ready: bit;
    out busy: bit;
}

impl std_multiplier {
    // Pipelined multiplier stages
    signal stage1_a: bit<WIDTH>;
    signal stage1_b: bit<WIDTH>;
    signal stage1_valid: bit;
    
    signal stage2_partial: bit<WIDTH*2>;
    signal stage2_valid: bit;
    
    signal stage3_product: bit<WIDTH*2>;
    signal stage3_valid: bit;
    
    on(clk.rise) {
        if rst.active {
            stage1_valid <= 0;
            stage2_valid <= 0;
            stage3_valid <= 0;
            stage1_a <= 0;
            stage1_b <= 0;
            stage2_partial <= 0;
            stage3_product <= 0;
        } else {
            // Stage 1: Input registration
            if start {
                stage1_a <= a;
                stage1_b <= b;
                stage1_valid <= 1;
            } else {
                stage1_valid <= 0;
            }
            
            // Stage 2: Partial product calculation
            if stage1_valid {
                stage2_partial <= stage1_a * stage1_b;
                stage2_valid <= 1;
            } else {
                stage2_valid <= 0;
            }
            
            // Stage 3: Output registration
            if stage2_valid {
                stage3_product <= stage2_partial;
                stage3_valid <= 1;
            } else {
                stage3_valid <= 0;
            }
        }
    }
    
    product = stage3_product;
    ready = stage3_valid;
    busy = stage1_valid || stage2_valid || stage3_valid;
    
    // Verification
    assert property (start |=> ##3 ready) @(posedge clk);
    assert property (ready -> product == $past(a, 3) * $past(b, 3)) @(posedge clk);
}
