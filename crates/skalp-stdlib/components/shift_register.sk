// Standard library shift register component
entity std_shift_register<const WIDTH: usize, const DEPTH: usize> {
    in clk: clock;
    in rst: reset;
    in enable: bit;
    in serial_in: bit;
    in parallel_load: bit;
    in parallel_data: bit<WIDTH>;
    out serial_out: bit;
    out parallel_out: bit<WIDTH>;
}

impl std_shift_register {
    signal shift_reg: bit<WIDTH>;
    
    on(clk.rise) {
        if rst.active {
            shift_reg <= 0;
        } else if parallel_load {
            shift_reg <= parallel_data;
        } else if enable {
            shift_reg <= {serial_in, shift_reg[WIDTH-1:1]};
        }
    }
    
    serial_out = shift_reg[0];
    parallel_out = shift_reg;
    
    assert property (rst.active |=> shift_reg == 0) @(posedge clk);
    assert property (parallel_load |=> shift_reg == parallel_data) @(posedge clk);
}
