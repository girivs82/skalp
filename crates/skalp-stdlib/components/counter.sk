// Standard library counter component
entity std_counter<const WIDTH: usize> {
    in clk: clock;
    in rst: reset;
    in enable: bit;
    in load: bit;
    in load_value: bit<WIDTH>;
    out count: bit<WIDTH>;
    out overflow: bit;
    out underflow: bit;
}

impl std_counter {
    signal counter_reg: bit<WIDTH>;
    
    on(clk.rise) {
        if rst.active {
            counter_reg <= 0;
        } else if load {
            counter_reg <= load_value;
        } else if enable {
            counter_reg <= counter_reg + 1;
        }
    }
    
    count = counter_reg;
    overflow = (counter_reg == (1 << WIDTH) - 1) && enable && !load;
    underflow = (counter_reg == 0) && enable && !load;
    
    // Verification properties
    assert property (rst.active |=> count == 0)
        @(posedge clk);
        
    assert property (load |=> count == load_value)
        @(posedge clk);
}
