{
    "name": "SKALP",
    "scopeName": "source.skalp",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#types"
        },
        {
            "include": "#literals"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#identifiers"
        },
        {
            "include": "#attributes"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.skalp",
                    "match": "//.*$"
                },
                {
                    "name": "comment.block.skalp",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.skalp",
                    "match": "\\b(if|else|match|for|while|return|break|continue)\\b"
                },
                {
                    "name": "keyword.declaration.skalp",
                    "match": "\\b(entity|impl|protocol|trait|type|const|let|var|signal)\\b"
                },
                {
                    "name": "keyword.other.skalp",
                    "match": "\\b(in|out|inout|on|with|where|as|async|await|flow|intent|requirement)\\b"
                },
                {
                    "name": "keyword.event.skalp",
                    "match": "\\b(rise|fall|edge|active|inactive)\\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "storage.type.primitive.skalp",
                    "match": "\\b(bit|logic|int|nat|fixed|clock|reset|event|stream)\\b"
                },
                {
                    "name": "storage.type.generic.skalp",
                    "match": "\\b([A-Z][a-zA-Z0-9_]*)\\s*<",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.skalp"
                        }
                    }
                },
                {
                    "name": "entity.name.type.skalp",
                    "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
                }
            ]
        },
        "literals": {
            "patterns": [
                {
                    "name": "constant.numeric.binary.skalp",
                    "match": "\\b0b[01_]+\\b"
                },
                {
                    "name": "constant.numeric.hex.skalp",
                    "match": "\\b0x[0-9a-fA-F_]+\\b"
                },
                {
                    "name": "constant.numeric.decimal.skalp",
                    "match": "\\b[0-9][0-9_]*\\b"
                },
                {
                    "name": "string.quoted.double.skalp",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.skalp",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "constant.language.boolean.skalp",
                    "match": "\\b(true|false)\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.assignment.skalp",
                    "match": "(<=|:=|=)"
                },
                {
                    "name": "keyword.operator.comparison.skalp",
                    "match": "(==|!=|<|>|<=|>=)"
                },
                {
                    "name": "keyword.operator.logical.skalp",
                    "match": "(&&|\\|\\||!)"
                },
                {
                    "name": "keyword.operator.arithmetic.skalp",
                    "match": "(\\+|-|\\*|/|%|<<|>>)"
                },
                {
                    "name": "keyword.operator.bitwise.skalp",
                    "match": "(&|\\||\\^|~)"
                },
                {
                    "name": "keyword.operator.flow.skalp",
                    "match": "\\|>"
                },
                {
                    "name": "keyword.operator.arrow.skalp",
                    "match": "(->|=>)"
                }
            ]
        },
        "identifiers": {
            "patterns": [
                {
                    "name": "variable.other.skalp",
                    "match": "\\b[a-z_][a-zA-Z0-9_]*\\b"
                }
            ]
        },
        "attributes": {
            "patterns": [
                {
                    "name": "meta.attribute.skalp",
                    "match": "@[a-zA-Z_][a-zA-Z0-9_]*",
                    "captures": {
                        "0": {
                            "name": "entity.name.function.attribute.skalp"
                        }
                    }
                }
            ]
        }
    }
}