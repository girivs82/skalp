use std::process::Command;
use std::fs;
use std::path::PathBuf;
use tempfile::TempDir;

fn skalp_binary() -> PathBuf {
    let mut binary = std::env::current_exe().unwrap();
    binary.pop(); // deps
    binary.pop(); // debug
    binary.push("skalp");
    binary
}

#[test]
fn test_cli_help() {
    let output = Command::new(skalp_binary())
        .args(&["--help"])
        .output()
        .expect("Failed to execute command");

    assert!(output.status.success());
    let stdout = String::from_utf8(output.stdout).unwrap();
    assert!(stdout.contains("Intent-driven hardware synthesis"));
    assert!(stdout.contains("Commands:"));
    assert!(stdout.contains("new"));
    assert!(stdout.contains("build"));
    assert!(stdout.contains("sim"));
    assert!(stdout.contains("synth"));
}

#[test]
fn test_new_project_creation() {
    let temp_dir = TempDir::new().unwrap();
    let project_name = "test_project";

    let output = Command::new(skalp_binary())
        .args(&["new", project_name])
        .current_dir(&temp_dir)
        .output()
        .expect("Failed to execute command");

    assert!(output.status.success());

    let project_path = temp_dir.path().join(project_name);
    assert!(project_path.exists());
    assert!(project_path.join("Cargo.toml").exists());
    assert!(project_path.join("README.md").exists());
    assert!(project_path.join("src").exists());
    assert!(project_path.join("src/main.sk").exists());
    assert!(project_path.join("tests").exists());
    assert!(project_path.join("examples").exists());

    // Check content of main.sk
    let main_sk = fs::read_to_string(project_path.join("src/main.sk")).unwrap();
    assert!(main_sk.contains("entity Counter"));
    assert!(main_sk.contains("impl Counter"));
}

#[test]
fn test_build_systemverilog() {
    let temp_dir = TempDir::new().unwrap();
    let project_name = "build_test";

    // Create project
    Command::new(skalp_binary())
        .args(&["new", project_name])
        .current_dir(&temp_dir)
        .output()
        .expect("Failed to create project");

    let project_path = temp_dir.path().join(project_name);

    // Build project
    let output = Command::new(skalp_binary())
        .args(&["build"])
        .current_dir(&project_path)
        .output()
        .expect("Failed to build project");

    assert!(output.status.success());

    let build_dir = project_path.join("build");
    assert!(build_dir.exists());
    assert!(build_dir.join("design.sv").exists());

    let sv_content = fs::read_to_string(build_dir.join("design.sv")).unwrap();
    assert!(sv_content.contains("module"));
    assert!(sv_content.contains("endmodule"));
    assert!(sv_content.contains("Generated by SKALP"));
}

#[test]
fn test_build_vhdl() {
    let temp_dir = TempDir::new().unwrap();
    let project_name = "vhdl_test";

    Command::new(skalp_binary())
        .args(&["new", project_name])
        .current_dir(&temp_dir)
        .output()
        .expect("Failed to create project");

    let project_path = temp_dir.path().join(project_name);

    let output = Command::new(skalp_binary())
        .args(&["build", "--target", "vhdl"])
        .current_dir(&project_path)
        .output()
        .expect("Failed to build project");

    assert!(output.status.success());

    let vhdl_file = project_path.join("build/design.vhd");
    assert!(vhdl_file.exists());

    let vhdl_content = fs::read_to_string(vhdl_file).unwrap();
    assert!(vhdl_content.contains("library IEEE"));
    assert!(vhdl_content.contains("entity"));
    assert!(vhdl_content.contains("architecture"));
    assert!(vhdl_content.contains("Generated by SKALP"));
}

#[test]
fn test_build_lir() {
    let temp_dir = TempDir::new().unwrap();
    let project_name = "lir_test";

    Command::new(skalp_binary())
        .args(&["new", project_name])
        .current_dir(&temp_dir)
        .output()
        .expect("Failed to create project");

    let project_path = temp_dir.path().join(project_name);

    let output = Command::new(skalp_binary())
        .args(&["build", "--target", "lir"])
        .current_dir(&project_path)
        .output()
        .expect("Failed to build project");

    assert!(output.status.success());

    let lir_file = project_path.join("build/design.lir");
    assert!(lir_file.exists());

    let lir_content = fs::read_to_string(lir_file).unwrap();
    let _lir_json: serde_json::Value = serde_json::from_str(&lir_content).unwrap();
    // LIR should be valid JSON
}

#[test]
fn test_simulation_command() {
    let temp_dir = TempDir::new().unwrap();
    let project_name = "sim_test";

    Command::new(skalp_binary())
        .args(&["new", project_name])
        .current_dir(&temp_dir)
        .output()
        .expect("Failed to create project");

    let project_path = temp_dir.path().join(project_name);

    // Build LIR first
    Command::new(skalp_binary())
        .args(&["build", "--target", "lir"])
        .current_dir(&project_path)
        .output()
        .expect("Failed to build LIR");

    // Run simulation
    let output = Command::new(skalp_binary())
        .args(&["sim", "build/design.lir", "--duration", "100"])
        .current_dir(&project_path)
        .output()
        .expect("Failed to run simulation");

    assert!(output.status.success());
    let stdout = String::from_utf8(output.stdout).unwrap();
    assert!(stdout.contains("Starting GPU-accelerated simulation"));
    assert!(stdout.contains("100 cycles"));
}

#[test]
fn test_synthesis_command() {
    let temp_dir = TempDir::new().unwrap();
    let project_name = "synth_test";

    Command::new(skalp_binary())
        .args(&["new", project_name])
        .current_dir(&temp_dir)
        .output()
        .expect("Failed to create project");

    let project_path = temp_dir.path().join(project_name);

    let output = Command::new(skalp_binary())
        .args(&["synth", "src/main.sk", "--device", "ice40-hx8k"])
        .current_dir(&project_path)
        .output()
        .expect("Failed to run synthesis");

    assert!(output.status.success());
    let stdout = String::from_utf8(output.stdout).unwrap();
    assert!(stdout.contains("synthesis for target"));
    assert!(stdout.contains("Ice40"));
}