// Generated by SKALP compiler
// Design: main

module ALU (
    input [31:0] a,
    input [31:0] b,
    input [2:0] op,
    input clk,
    output [31:0] result,
    output zero,
    output overflow
);

    wire [31:0] result_comb;
    wire zero_comb;
    wire overflow_comb;

    assign result_comb = ((op == 3'b000) ? (a + b) : ((op == 3'b001) ? (a - b) : ((op == 3'b010) ? (a & b) : ((op == 3'b011) ? (a | b) : ((op == 3'b100) ? (a ^ b) : ((op == 3'b101) ? (a << b[4:0]) : ((op == 3'b110) ? (a >> b[4:0]) : ((op == 3'b111) ? ((a < b) ? 1 : 0) : 0))))))));
    assign zero_comb = ((result_comb == 0) ? 1 : 0);
    assign overflow_comb = ((op == 3'b000) ? 0 : ((op == 3'b001) ? 0 : 0));

    always_ff @(posedge clk) begin
        result <= result_comb;
        zero <= zero_comb;
        overflow <= overflow_comb;
    end

endmodule
