// Generated by SKALP compiler
// Module: main

module ALU (
input wire [31:0] a,
input wire [31:0] b,
input wire [2:0] op,
input wire clk,
output wire [31:0] result,
output wire zero,
output wire overflow
);

wire [31:0] result_comb    ;
wire zero_comb    ;
wire overflow_comb    ;

assign sig_0 = ((port_2 == 1'h0) ? (port_0 + port_1) : ((port_2 == 1'h1) ? (port_0 - port_1) : ((port_2 == 2'h1) ? (port_0 & port_1) : ((port_2 == 2'h3) ? (port_0 | port_1) : ((port_2 == 3'h1) ? (port_0 ^ port_1) : ((port_2 == 3'h5) ? (port_0 << port_1[4:0]) : ((port_2 == 3'h3) ? (port_0 >> port_1[4:0]) : ((port_2 == 3'h7) ? ((port_0 < port_1) ? 1 : 0) : 0))))))))    ;
assign sig_1 = ((sig_0 == 0) ? 1 : 0)    ;
assign sig_2 = ((port_2 == 1'h0) ? (((~port_0[31] & ~port_1[31]) & sig_0[31]) | ((port_0[31] & port_1[31]) & ~sig_0[31])) : ((port_2 == 1'h1) ? (((~port_0[31] & port_1[31]) & sig_0[31]) | ((port_0[31] & ~port_1[31]) & ~sig_0[31])) : 0))    ;

always_ff @(posedge port_3)     begin
port_4 <= sig_0        ;
port_5 <= sig_1        ;
port_6 <= sig_2        ;
    end

endmodule

