// Test file for advanced type support

// Struct definition for a packet header
struct PacketHeader {
    src_addr: nat[32];
    dst_addr: nat[32];
    length: nat[16];
    checksum: nat[16];
}

// Enum for state machine states
enum State {
    Idle,
    Processing,
    Done,
    Error
}

// Union for multiplexing different data types
union DataPayload {
    integer: int[32];
    float: nat[32];  // Interpreted as float
    bytes: [bit[8]; 4];
}

// Entity using the advanced types
entity DataProcessor {
    in clk: clock
    in rst: reset
    in header_in: PacketHeader
    in state_cmd: State
    out current_state: State
    out data_out: DataPayload
}

impl DataProcessor {
    signal internal_state: State;
    signal buffer: PacketHeader;

    on (clk.rise) {
        if (rst) {
            internal_state = State::Idle;
        } else {
            match state_cmd {
                State::Idle => {
                    buffer = header_in;
                    internal_state = State::Processing;
                }
                State::Processing => {
                    // Process the data
                    internal_state = State::Done;
                }
                State::Done => {
                    internal_state = State::Idle;
                }
                State::Error => {
                    internal_state = State::Idle;
                }
            }
        }
    }

    assign current_state = internal_state;
}