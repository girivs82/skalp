// Common Type Definitions for Graphics Pipeline
//
// This module provides type definitions using SKALP's built-in parametric types.
// Leverages vec2/vec3/vec4<fp32> for vector operations
// All types are automatically flattened during synthesis for optimal hardware generation

// ============================================================================
// Vector Type Aliases (using built-in parametric types)
// ============================================================================

/// 3D vector using IEEE 754 single-precision floating-point
///
/// Built-in vec3 type with fp32 components
/// Automatically flattened to individual signals during synthesis
pub type Vec3 = vec3<fp32>;

/// 4D vector using fp32 (for homogeneous coordinates)
///
/// Built-in vec4 type with fp32 components
pub type Vec4 = vec4<fp32>;

/// 2D vector using fp32 (for texture coordinates)
///
/// Built-in vec2 type with fp32 components
pub type Vec2 = vec2<fp32>;

// ============================================================================
// Matrix Type Alias
// ============================================================================

/// 4x4 transformation matrix
///
/// Represented as array of Vec4 (each row is a Vec4)
pub type Matrix4x4 = [Vec4; 4];

// ============================================================================
// Color Type
// ============================================================================

/// RGBA color (8-bit per channel)
pub struct Color {
    pub r: bit[8],
    pub g: bit[8],
    pub b: bit[8],
    pub a: bit[8]
}

// ============================================================================
// Vertex Data Structures
// ============================================================================

/// Input vertex attributes
pub struct Vertex {
    pub position: Vec3,
    pub normal: Vec3,
    pub color: Vec4  // RGBA color (as bit patterns)
}

/// Transformed vertex (after geometry processing)
pub struct TransformedVertex {
    pub position: Vec4,   // Homogeneous position (x, y, z, w)
    pub normal: Vec3,     // Surface normal
    pub color: Vec4,      // RGBA color
    pub tex_coord: Vec2   // Texture coordinates
}

/// Screen-space vertex (after viewport transform)
pub struct ScreenVertex {
    pub x: bit[16],      // Screen X in pixels
    pub y: bit[16],      // Screen Y in pixels
    pub depth: bit[32],  // Z-buffer depth
    pub color: Color     // Final pixel color (8-bit)
}

// ============================================================================
// Command Types (for AXI register interface)
// ============================================================================

/// Command opcodes for graphics operations
pub enum CommandOpcode {
    Nop = 0,           // No operation
    DrawTriangle = 1,  // Draw single triangle
    SetTransform = 2,  // Update transformation matrix
    SetViewport = 3,   // Set viewport parameters
    ClearBuffer = 4,   // Clear framebuffer/z-buffer
    SetLighting = 5,   // Update lighting parameters
    Flush = 6          // Flush pipeline and sync
}

/// Graphics command with opcode and data
pub struct Command {
    pub opcode: bit[4],      // 4 bits for opcode (0-15)
    pub vertex_addr: bit[28] // 28 bits for vertex buffer address
}

// ============================================================================
// State Machine States
// ============================================================================

/// Geometry processor pipeline state
pub enum GeometryState {
    Idle,           // Waiting for command
    LoadVertex,     // Fetching vertex data
    Transform,      // Model-View-Projection transform
    Lighting,       // Lighting calculation (Phong)
    Viewport,       // Viewport transform
    WriteOutput     // Writing to output FIFO
}

/// Rasterizer pipeline state
pub enum RasterizerState {
    Idle,           // Waiting for triangles
    LoadTriangle,   // Loading 3 vertices
    ComputeEdges,   // Edge equation setup
    ScanLine,       // Scanline rasterization
    Interpolate,    // Attribute interpolation
    WritePixels     // Writing to framebuffer
}

// ============================================================================
// Utility Functions
// ============================================================================

/// Create identity matrix (4x4)
///
/// Returns matrix with 1.0 (0x3F800000 in IEEE 754) on diagonal
pub fn identity_matrix() -> Matrix4x4 {
    return [
        Vec4 { x: 0x3F800000, y: 0, z: 0, w: 0 },  // [1, 0, 0, 0]
        Vec4 { x: 0, y: 0x3F800000, z: 0, w: 0 },  // [0, 1, 0, 0]
        Vec4 { x: 0, y: 0, z: 0x3F800000, w: 0 },  // [0, 0, 1, 0]
        Vec4 { x: 0, y: 0, z: 0, w: 0x3F800000 }   // [0, 0, 0, 1]
    ]
}

/// Create zero Vec3
pub fn zero_vec3() -> Vec3 {
    return Vec3 { x: 0, y: 0, z: 0 }
}

/// Create zero Vec4
pub fn zero_vec4() -> Vec4 {
    return Vec4 { x: 0, y: 0, z: 0, w: 0 }
}

/// Create default color (white, opaque)
pub fn default_color() -> Color {
    return Color { r: 0xFF, g: 0xFF, b: 0xFF, a: 0xFF }
}

// ============================================================================
// Module Documentation
// ============================================================================

// This types.sk file provides:
//
// 1. **Vector Types**: Vec2, Vec3, Vec4 for positions, normals, colors
//    - Using built-in vec2/vec3/vec4<fp32> parametric types
//    - Automatically flattened to individual fp32 signals during synthesis
//    - Native IEEE 754 single-precision floating-point support
//
// 2. **Matrix Types**: Matrix4x4 for transformations
//    - Represented as array of Vec4 rows
//    - Used for model, view, projection matrices
//
// 3. **Vertex Structures**: Vertex, TransformedVertex, ScreenVertex
//    - Track different stages of vertex processing pipeline
//    - Clear separation of coordinate spaces
//
// 4. **Command Types**: For CPU-GPU communication via AXI
//    - CommandOpcode enum for different operations
//    - Command struct with opcode and data
//
// 5. **State Enums**: For FSM control
//    - GeometryState: Vertex processing pipeline states
//    - RasterizerState: Pixel generation pipeline states
//
// 6. **Utility Functions**: Common operations
//    - identity_matrix(): 4x4 identity
//    - zero_vec3/4(): Zero vectors
//    - default_color(): White color
//
// ## Upgrade Path (Future)
//
// When parametric types are fully supported, this will migrate to:
//
// ```skalp
// pub type Vec3 = vec3<fp32>;
// pub type Matrix4x4 = [[fp32; 4]; 4];
// pub struct Vertex<T: Numeric> {
//     pub position: vec3<T>,
//     pub normal: vec3<T>,
//     pub color: vec4<T>
// }
// ```
//
// This will enable:
// - Type-safe numeric operations
// - Generic algorithms over numeric types
// - Automatic precision selection (fp32, fp16, fixed-point)
// - Better optimization opportunities
