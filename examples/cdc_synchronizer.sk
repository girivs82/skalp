// Clock Domain Crossing Synchronizer
// Demonstrates proper 2-flop synchronization for CDC

entity CDCSynchronizer {
    // Source clock domain
    in src_clk: clock
    in src_rst: reset(active_high)
    in src_data: bit[8]
    in src_valid: bit

    // Destination clock domain
    in dst_clk: clock
    in dst_rst: reset(active_high)
    out dst_data: bit[8]
    out dst_valid: bit
}

impl CDCSynchronizer {
    // Source domain: Gray-coded data
    signal src_data_gray: bit[8]
    signal src_valid_reg: bit

    // Destination domain: 2-stage synchronizers
    signal valid_sync1: bit
    signal valid_sync2: bit
    signal data_gray_sync1: bit[8]
    signal data_gray_sync2: bit[8]

    // Source clock domain logic
    on(src_clk.rise) {
        if src_rst {
            src_valid_reg <= 0
            src_data_gray <= 0
        } else {
            if src_valid {
                // Convert to Gray code for safe CDC
                src_data_gray <= src_data ^ (src_data >> 1)
                src_valid_reg <= 1
            } else {
                src_valid_reg <= 0
            }
        }
    }

    // Destination clock domain logic (2-flop synchronizer)
    on(dst_clk.rise) {
        if dst_rst {
            valid_sync1 <= 0
            valid_sync2 <= 0
            data_gray_sync1 <= 0
            data_gray_sync2 <= 0
        } else {
            // Stage 1: capture from source domain
            valid_sync1 <= src_valid_reg
            data_gray_sync1 <= src_data_gray

            // Stage 2: stable synchronized value
            valid_sync2 <= valid_sync1
            data_gray_sync2 <= data_gray_sync1
        }
    }

    // Outputs
    dst_valid = valid_sync2

    // Convert Gray code back to binary
    // Gray to Binary: each bit is XOR of all higher bits
    let g7 = data_gray_sync2[7];
    let b7 = g7;
    let b6 = b7 ^ data_gray_sync2[6];
    let b5 = b6 ^ data_gray_sync2[5];
    let b4 = b5 ^ data_gray_sync2[4];
    let b3 = b4 ^ data_gray_sync2[3];
    let b2 = b3 ^ data_gray_sync2[2];
    let b1 = b2 ^ data_gray_sync2[1];
    let b0 = b1 ^ data_gray_sync2[0];

    dst_data = {b7, b6, b5, b4, b3, b2, b1, b0}
}
